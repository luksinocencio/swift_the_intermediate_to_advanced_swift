<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

// MARK: - Problem: How to initialize an object with a closure?

// MARK: - Unconventional way
let box: UIView = {
    let view = UIView()
    return view
}()

// MARK: - create ui components
let buttonSize = CGRect(x: 0, y: 0, width: 100, height: 100)

// ViewControllerOne
let bobButton = UIButton(frame: buttonSize)
bobButton.backgroundColor = .black
bobButton.titleLabel?.text = "Bob"
bobButton.titleLabel?.textColor = .white

// ViewControllerTwo
let bobbyButton = UIButton(frame: buttonSize)
bobbyButton.backgroundColor = .black
bobbyButton.titleLabel?.text = "Bobby"
bobbyButton.titleLabel?.textColor = .white

// MARK: - Create Button with function
func createButton(enterTitle: String) -&gt; UIButton { 
    let button = UIButton(frame: buttonSize)
    button.backgroundColor = .black
    button.titleLabel?.text = enterTitle
    return button
}

createButton(enterTitle: "Yoyo")

// MARK: - Introducing Unconventional Way

struct Human { 
    init() { 
        print("Born 1996")
    }
}

let createBob = { () -&gt; Human in 
    let human = Human()
    return human
}()

// MARK: - Create UIView Uncoventionally

let bobView = { () -&gt; UIView in 
    let view = UIView()
    view.backgroundColor = .black
    return view
}()

let newBobbyView: UIView = {
    let view = UIView()
    view.backgroundColor = .black
    return view
}()

let newNewBobbyView: UIView = {
    let view = UIView()
    view.backgroundColor = .black
    return view
}()

// MARK: - Lazy Var
class IntenseMathProblem {
    var complexNumber: Int = { 1 * 1 }()
}

let problem = IntenseMathProblem() // no value for complexNumber
problem.complexNumber // now, complexnumber is 1

class SortFromDataBase { 
    // Data
    lazy var sortNumberFromDatabase: [Int] = {
        // Calculation and sorting
        [1, 2, 3, 4, 5, 6, 7, 8, 9]
    }()
}

SortFromDataBase().sortNumberFromDatabase

class CompressionManager { 
    lazy var compressedImage: UIImage = {
        let image = UIImage()
        // Compress the image
        // Logic
        return image
    }()
}

/**
 1. You can't use lazy with `let` since there is no initial value, and it is
 attained later when it is accessed.
 2. You can't use it with a `Computed property` since computed property is always
 recalculated (requires CPU) when you modify any of the variables that has a
 relationship with the lazy property.
 **/
</string>
			<key>ModifiedRange</key>
			<string>{0, 2378}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
