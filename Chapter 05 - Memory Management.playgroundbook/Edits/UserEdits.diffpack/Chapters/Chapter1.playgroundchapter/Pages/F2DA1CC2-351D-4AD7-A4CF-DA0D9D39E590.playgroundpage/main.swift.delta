<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

// MARK: - Problem: Why delegate should be weak var

// MARK: - Design Protocol
protocol SendDataDelegate: AnyObject {}

// MARK: - Sender/Delegator
class SendingVC { 
    weak var delegate: SendDataDelegate?
    
    deinit { 
        print("Delegator gone")
    }
}

// MARK: - Receiver/Delegate
class ReceivingVC: SendDataDelegate {
    lazy var sendignVC: SendingVC = { 
        let vc = SendingVC()
        vc.delegate = self
        return vc
    }()
}

var receivingVC: ReceivingVC? = ReceivingVC()
receivingVC?.sendignVC
receivingVC = nil

/**
 - A week reference allows the referencing object to becoming nil(this happens automatically when the referenced object is deallocated).
 - Based on the rule above, the referencing object/variable must be optional.
 */


</string>
			<key>ModifiedRange</key>
			<string>{0, 792}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
