<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

/**
 - @escape and @autoclosures
 - Problem: What are those? 
 */

// MARK: - Scenario 01
var closureBlocks: [() -&gt; Void] = []

func funcWithClosure(closure: @escaping () -&gt; Void) { 
    closureBlocks.append(closure)
    print("Function done")
}

// If the closure can be executed after the function finishes == @escape

// MARK: - Scenario 02
func fincWithNetworkingClosure(closure: @escaping () -&gt; Void) { 
    DispatchQueue.global().async {
        closure() // ex downloading
    }
}

fincWithNetworkingClosure { 
    for _ in 1...10 { 
        print("downloading")
    }
}

class Normal { 
    let name = "Lucas"
    
    func normalFunctionWithClosure(closure: (String) -&gt; Void) { 
        closure(self.name)
    }
}

Normal().normalFunctionWithClosure { myName in
    print(myName)
}
// By default, normal functions/closures are non-escaping
/**
 - There is no retention cycle for non-escaping.
 - You. may use self keyword without about memory leak.
 - Performance and ability for the compiler to optimize.
 */

// MARK: - @autoclosure
func checkIDCard(hasCard: @autoclosure () -&gt; Bool) { 
    if hasCard() { 
        print("You've an ID")
    }
}
checkIDCard(hasCard: true)

// Not autoclosure
//checkIDCard(hasCard: { return true })
//checkIDCard { return true }
//checkIDCard { true }

// MARK: - Lazy Init Capture
class BobGreet { 
    var name = "Bob the Developer"
    
    lazy var greeting: String = { 
        return "Hello, \(self.name)"
    }()
    
    deinit { 
        print("I'm gone ðŸ•º")
    }
}

var bobGreet: BobGreet? = BobGreet()
bobGreet?.greeting 
bobGreet = nil

// MARK: - Non escaping by default
</string>
			<key>ModifiedRange</key>
			<string>{0, 1648}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
