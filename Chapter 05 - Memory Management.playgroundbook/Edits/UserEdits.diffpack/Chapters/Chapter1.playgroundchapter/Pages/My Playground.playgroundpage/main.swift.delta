<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

// MARK: - Problem Deallocate and allocate objects with ARC

class Passport { 
    var human: Human?
    let citizenship: String
    
    init(citizenship: String) {
        self.citizenship = citizenship
        print("\(citizenship) passport generated")
    }
    
    deinit { 
        print("I, paper, am gone")
    }
}

// MARK: - Design Human
class Human { 
    var passport: Passport?
    let name: String
    
    init(name: String) { 
        self.name = name
        print("\(name), generated")
    }
    
    deinit { 
        print("I, \(name), gone")
    }
}

// Passport(citizenship: "Republic of Korea")
//var myPassport = Passport(citizenship: "The Mars")

// MARK: - Introducing Automatic Reference Counting

// Create Instances
var bobby: Human? = Human(name: "Lucas")
var passpost: Passport? = Passport(citizenship: "Brazil")

// Deallocate
bobby = nil
passpost = nil
/**
 - The Only Rule: If the reference count is zero/no relationship, the object gets purged out of the memory.
 */

var bob: Human? = Human(name: "Lucas")
var myPassport: Passport? = Passport(citizenship: "Brazil")

bob?.passport = myPassport
myPassport?.human = bob

// Option 1
// bob= nil
// myPassport = nil

// Option 2
myPassport = nil
bob = nil
</string>
			<key>ModifiedRange</key>
			<string>{0, 1254}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
