<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

func recursiveFunction() { 
    print("Hi!")
    recursiveFunction()
}

indirect enum ArithmeticExpressions {
    case number(Int)
    case addition(ArithmeticExpressions, ArithmeticExpressions)
    case multiplication(ArithmeticExpressions, ArithmeticExpressions)
}

ArithmeticExpressions.number(4)
let additionEnum = ArithmeticExpressions.addition(.number(5), .number(10))
let multiplicationEnum = ArithmeticExpressions.multiplication(.number(10), .number(10))

let five = ArithmeticExpressions.number(5)
let four = ArithmeticExpressions.number(4)

func evaluate(_ expression: ArithmeticExpressions) -&gt; Int { 
    switch expression { 
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}

evaluate(.number(4))
evaluate(additionEnum)
evaluate(multiplicationEnum)

enum Operation { 
    case addition(Int, Int)
    case multiplication(Int, Int)
    
    var result: Int { 
        switch self { 
        case let .addition(number1, number2):
            return number1 + number2
        case let .multiplication(number1, number2):
            return number1 * number2
        }
    }
}

Operation.multiplication(10, 10).result

struct StructOperation { 
    func addTwoNumbers(_ number1: Int, _ number2: Int) -&gt; Int { 
        number1 + number2
    }
    
    func multiplyNumbers(_ number1: Int, _ number2: Int) -&gt; Int { 
        number1 * number2
    }
}

StructOperation().addTwoNumbers(4, 9)

struct MathOperation { 
    static let addition: (Int, Int) -&gt; Int = { $0 + $1 }
    static let multiplication: (Int, Int) -&gt; Int = { $0 * $1 }
}
MathOperation.addition(10, 10)
MathOperation.multiplication(10, 10)
</string>
			<key>ModifiedRange</key>
			<string>{0, 1811}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
