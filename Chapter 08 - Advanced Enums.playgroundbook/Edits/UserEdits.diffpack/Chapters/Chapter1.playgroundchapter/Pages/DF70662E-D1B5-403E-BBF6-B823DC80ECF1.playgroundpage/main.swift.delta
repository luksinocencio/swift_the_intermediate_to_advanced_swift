<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

// Problem: Lets make it pratical

enum Storyboard: String { 
    case profile
    case setting
    case newsfeed
    
    var identifier: String { 
        return self.rawValue
    }
}

let profile = Storyboard.profile
profile.identifier
profile.rawValue

// MARK: -  API Guideline Goal
func descibeStoryboard(storyboard: Storyboard) -&gt; String { 
    switch storyboard {
    case .profile:
        return "\(storyboard.identifier): Profile picture, followers"
    case .setting:
        return "\(storyboard.identifier): Logout, invite"
    case .newsfeed:
        return "\(storyboard.identifier): videos, texts"
    }
}

descibeStoryboard(storyboard: .setting)

// MARK: -  Mutating Methods

enum MealProcess: String { 
    case breakfast, lunch, dinner
    
    var description: String { 
        return self.rawValue
    }
    
    mutating func nextMeal() { 
        print("Time to move on from \(self.description)")
        switch self { 
        case .breakfast:
            self = .lunch
            print("I had a nice lunch")
        case .lunch:
            self = .dinner
            print("I had a nice dinner")
        case .dinner:
            self = .breakfast
            print("I had a nice breakfast")
        }
    }
}

var currentMeal = MealProcess.breakfast
currentMeal.nextMeal()
currentMeal.nextMeal()
currentMeal.nextMeal()

// MARK: - Static Method
//enum AppleDevices {
//    case iWatch, iPhone, iMac, MacPro
//    
//    static func getAppleDevices(name: String) -&gt; AppleDevices? { 
//        switch name { 
//        case "iWatch":
//            return .iWatch
//        case "iPhone":
//            return .iPhone
//        case "iMac":
//            return .iMac
//        case "MacPro":
//            return .MacPro
//        default:
//            return nil
//        }
//    }
//}
//
//let userProduct = AppleDevices.getAppleDevices(name: "iWatch")
//print(userProduct)

enum AppleDevices: String { 
    case iWatch, iPhone, iMac, MacPro
    
    static func getProduct(name: String) -&gt; AppleDevices? { 
        return AppleDevices(rawValue: name)
    }
    
    static func getAppleDevice(enterName: String) -&gt; AppleDevices? { 
        switch enterName { 
        case "iWatch", "iPhone", "iMac", "MacPro":
            return getProduct(name: enterName)
        default:
            return nil
        }
    }
}

AppleDevices.getProduct(name: "iPhone")
AppleDevices.getAppleDevice(enterName: "iPhone")

// MARK: Custom Init

enum AppleDevice: String { 
    case iWatch, iPhone, iMac, MacPro
    
    init?(name: String) { 
        if name == "iWtach" { 
            self = .iWatch
        } else { 
            return nil
        }
    }
}

AppleDevice(name: "iWatch")

enum IntCategory { 
    case small
    case medium
    case big
    case weird
    
    init(number: Int) { 
        switch number { 
        case 0..&lt;1000:
            self = .small
        case 1000..&lt;100000:
            self = .medium
        case 100000..&lt;1000000:
            self = .big
        default:
            self = .weird
        }
    }
}

// MARK: - Pratical Case

enum HttpError: String { 
    case Code400 = "Bad Request"
    case Code401 = "Unauthorized"
    case Code402 = "Payment Required"
    case Code403 = "Forbidden"
    case Code404 = "Page Not Found"
    
    var description: String {
        return self.rawValue
    }
}
HttpError.Code400.description

// MARK: - Cell Identifier
enum CellType: String { 
    case ButtonValueCell
    case UnitEditCell
    case LabelCell
    case ResultLabelCell
    
    var name: String { 
        return self.rawValue
    }
}

import UIKit

enum NavigationTheme { 
    case Placid
    case Warning
    case Danger
    
    var barTintColor: UIColor { 
        switch self {
        case .Placid: return UIColor.clear
        case .Warning: return UIColor.blue
        case .Danger: return UIColor.red
        }
    }
}

let colorSituation = NavigationTheme.Placid
colorSituation.barTintColor

extension NavigationTheme {
    init(numberOfTasks: Int) { 
        switch numberOfTasks {
        case 0...3:
            self = .Placid
        case 4...9:
            self = .Warning
        default:
            self = .Danger
        }
    }
}

let currentColor = NavigationTheme(numberOfTasks: 10).barTintColor
</string>
			<key>ModifiedRange</key>
			<string>{0, 4301}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
