<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation

// Problem: Functional programming met Swift dictionary

// default value for dictionary
var myInfo = ["name": "Lucas", "age": "28"]
let name = myInfo["name"]

// Pratical Usage: Everywhere for accessing dictionary value

let contacts = ["Julia", "Susan", "John", "Alice", "Alex"]
let grouped = Dictionary(grouping: contacts, by: { $0.first! })
print(grouped)

let groupedWithPrefix = Dictionary(grouping: contacts, by: { _ in
    return "Name: "
})
print(groupedWithPrefix)

// Remove duplicates
let duplicates = [("a", 1), ("b", 7), ("a", 3), ("b", 10)]

let myLetter = Dictionary(duplicates, uniquingKeysWith: { (letter, number) in letter })
print(myLetter)

// Zip: (Dictionary Like)
let words = ["one", "two", "three", "four"]
let numbers = 1...words.count

for (word, number) in zip(words, numbers) {
    print("\(word): \(number)")
}

let friends = ["Hoy", "Dan", "Huy"]
let friendsWithValue = Dictionary(uniqueKeysWithValues: zip(1..., friends))
print(friendsWithValue)

// Functional Programming with Set
let set: Set = [1, 2, 3, 4, 5]
let filteredSet = set.filter { $0 % 2 == 0 }
type(of: filteredSet)

// Functional Programming to Dictionary
let dictionary = ["name": "Lucas", "age": "15", "hairColor": "Black"]
let filtered = dictionary.filter {
    $0.key == "name"
}

print(filtered)


let mapped = dictionary.mapValues { value in
    value.uppercased()
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 1389}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
