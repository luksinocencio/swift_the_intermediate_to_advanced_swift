<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import UIKit

// MARK: - Problem: Protocols, who are you?

/// 1. When you subclass, you have to inherit properties and methods which you may not need. Your object becomes unnecessarily bloated.
/// 2. When you make a lot of super classes, it becomes extremely hard to navigate between each class and fix bugs/edit.
/// 3. Since objects are referencing to the same place in memory, if you make a copy and create a small change its property, it can mess up the rest. (Mutability due to reference)

// MARK: - Protocols
/// Protocol is like a basketball coach. He/She tells players what to do, but He/She doesn't know how to dunk.

protocol Humanable { 
    var name: String { get set }
    var race: String { get set }
    func sayHi()
}

struct Korean: Humanable {
    var name: String = "Bob Lee"
    var race: String = "Asian"

    func sayHi() {
        print("Hi, I'm \(name)")
    }
}

class American: Humanable {
    var name: String = "Joe Smith"
    var race: String = "White"

    func sayHi() {
        print("Hi, I'm \(name)")
    }
}

// MARK: - Protocol Inheritance
protocol SuperHumanable: Humanable { 
    var canFly: Bool { get set }
    func punch()
}

struct BobTheDeveloper: SuperHumanable {
    var name: String = "Bob" 
    var race: String = "Asian"
    var canFly: Bool = false

    func sayHi() { print("Hi, I'm \(name)") }
    
    func punch() { print("I don't punch") }
}

//MARK: - { get set } vs { get }
/// only applies to computed property 

protocol Breathable {
    var isBreating: Bool { get set }
    var isLiving: Bool { get }
}

struct Human: Breathable {
    var isBreating: Bool {
        get { return true }
        set {}
    }
    
    var isLiving: Bool {
        get { return true }
        set {}
    }
}

// { get }
// Stored Property ðŸ˜€
// Computed Property --&gt; Gettable, Settable (Optional)
</string>
			<key>ModifiedRange</key>
			<string>{0, 1839}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
